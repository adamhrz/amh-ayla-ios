# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.81.0"

default_platform :ios

def check_env_var(var_arr)
    var_arr.each { |v|
      if !ENV.has_key?(v) or ENV[v].empty?
        puts "Please set environment variable #{v} probably before running this command."
        exit!
      end
    }
end

def check_required_argument(arg)
    if arg.nil? or arg.empty?
        puts "please add version_number:x.y.z argument"
        exit!
    end
end

def get_version_string
    version_sentence = `find ../iOS_Aura -name Info.plist | xargs grep -A1 "<key>CFBundleShortVersionString</key>"`
    version_string = version_sentence.split("\n").last.gsub!(/.*<string>(.*)<\/string>.*/, "\\1")
    version_string.chomp
end

platform :ios do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
    #cocoapods
  end

  desc "Runs all the tests"
  lane :test do
    scan
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
    # match(type: "appstore") # more information: https://codesigning.guide
    check_env_var(["APPLE_ID", "TEAM_ID"])
		cocoapods
		increment_build_number
    gym(scheme: "iOS_Aura") # Build your app - more options available
    pilot(username: ENV["APPLE_ID"], apple_id: ENV["APPLE_ID"], team_id: ENV["TEAM_ID"])

    # sh "your_script.sh"
    # You can also use other beta testing services here (run `fastlane actions`)
  end

  desc "Deploy a new version to the App Store"
  lane :appstore do
    # match(type: "appstore")
    # snapshot
    check_env_var(["APPLE_ID", "TEAM_ID"])
		cocoapods
    gym(scheme: "iOS_Aura") # Build your app - more options available
    deliver(force: true, username: ENV["APPLE_ID"])
    # frameit
  end

  desc "make a release. This lane requires: 1) \"public\" and \"origin\" remote have been configured; 2) developers should have already added release notes in README.md"
  desc "and modified version number strings in various files; 3) there is already a release/x.y.z branch existing. Developers make a PR from release branch to master"
  desc "branch, release engineer merges PR, than run command like"
  desc " fastlane release"
  lane :release do |options|
    check_env_var(["GITHUB_API_TOKEN", "RELEASE_USER"])
    repo_name="AylaNetworks/iOS_Aura_Public"
    release_number = get_version_string
    check_required_argument(release_number)
    puts "Your release version is: " + release_number + ", is this correct(y/n)?"
    answer = $stdin.getch
    exit! unless answer.eql?("y")
    v="v"+release_number

    # push master branch from internal repo to public repo
    git_command(full_command: "git config user.email " + ENV["RELEASE_USER"])
    git_command(full_command: "git checkout master")
    ensure_git_branch(branch: "master")
    git_pull
    ensure_git_status_clean
    git_command(full_command: "git push public master");

    # not use automatic publish for now since it will trigger massive release emails immediately so be careful
    #publish a release which will create the tag on public. this requires you to set your own environment variable GITHUB_API_TOKEN
    #set_github_release(api_token: ENV["GITHUB_API_TOKEN"], repository_name: repo_name, tag_name: v, name: v+" Release", description: "see README.md for details")
    # pull tag to local
    #git_command(full_command: "git pull public master --tags");
    # push tag to internal repo
    #git_command(full_command: "git push origin #{v}");

    #when the above auto-publish is not used, create and push tags here.
    git_command(full_command: "git tag -a #{v} -m \"#{v} tag\"");
    git_command(full_command: "git push origin #{v}");
    git_command(full_command: "git push public #{v}");

    # push a release branch
    git_command(full_command: "git checkout release/#{release_number}")
    # origin must have this release branch already
    git_command(full_command: "git pull")
    ensure_git_branch(branch: "release/#{release_number}")
    ensure_git_status_clean
    git_command(full_command: "git push public release/#{release_number}")

    # if not auto-publish above, log in with release user on github and do release if everything is OK.
    # create PR to merge master back to develop and notify tech lead
    # send release notification email
    puts "Congratulations! Code push completed successfully. Do release pubish if not yet when everything is OK."
    puts "Then create PR to merge master back to develop"
  end

  desc "untag a release. In case you have new commits for a release after you have already tagged the release."
  desc "use this command to untag the release. So that you can do \"release\" again to include new commits."
  lane :untag do |options|
    release_number = get_version_string
    check_required_argument(release_number)
    puts "You want to untag version: " + release_number + ", is this correct(y/n)?"
    answer = $stdin.getch
    exit! unless answer.eql?("y")
    v="v"+release_number

    git_command(full_command: "git tag -d #{v}")
    git_command(full_command: "git push origin :refs/tags/#{v}")
    git_command(full_command: "git push public :refs/tags/#{v}")
  end
  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
